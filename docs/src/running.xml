<chapter xmlns="http://docbook.org/ns/docbook"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xml:id="running" version="5.0">
<title>Running XML Calabash</title>

<para>This chapter describes how to run <citetitle>XML
Calabash</citetitle> from the command-line. If you're using the
processor embedded in some other application, please consult the
documentation for that application for details about how to run and
control it.</para>

<section xml:id="javasetup">
<title>Setting up the environment</title>

<para>You must have Java 1.6 installed in order to run <citetitle>XML Calabash</citetitle>.
(You can probably run it with Java 1.5, but you'll have to compile it yourself.)</para>

<para>In addition to Java, you need a set of jar files on your classpath. At a minimum, you need
to include the <filename>calabash.jar</filename> file and the jar files in the
<filename class="directory">lib</filename> directory of the distribution. Some steps
need various other libraries:</para>

<variablelist>
<varlistentry>
<term><tag>p:xsl-formatter</tag></term>
<listitem>
<para>Three formatters are supported:</para>
<variablelist>
<varlistentry>
<term><link xlink:href="http://antennahouse.com/">Antenna House</link></term>
<listitem>
<para>To use the Antenna House formatter, you must have
<filename>Alternate_XfoJavaCtl.jar</filename>.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><link xlink:href="http://xmlgraphics.apache.org/fop/">Apache FOP</link></term>
<listitem>
<para>To use the Apache FOP formatter, you must have
<filename>avalon-framework-4.2.0.jar</filename>,
<filename>batik-all-1.7.jar</filename>,
<filename>fop.jar</filename>,
<filename>serializer-2.7.0.jar</filename>
<filename>xalan-2.7.0.jar</filename>,
<filename>xercesImpl-2.7.1.jar</filename>,
<filename>xml-apis-1.3.04.jar</filename>,
<filename>xml-apis-ext-1.3.04.jar</filename>, and
<filename>xmlgraphics-commons-1.4.jar</filename>.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><link xlink:href="http://renderx.com/">Render X</link></term>
<listitem>
<para>To use the Render X formatter, you must have
<filename>xep.jar</filename>.
</para>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>

<varlistentry>
<term><tag>cx:delta-xml</tag></term>
<listitem>
<para>The <link xlink:href="http://deltaxml.com/">Delta XML</link> step
requires <filename>command.jar</filename>,
<filename>deltawing.jar</filename>, and
<filename>deltaxml.jar</filename>.</para>
</listitem>
</varlistentry>

<varlistentry>
<term><tag>p:validate-with-relax-ng</tag></term>
<listitem>
<para>To use <link xlink:href="http://code.google.com/p/jing-trang/">Jing</link>,
you must have <filename>jing.jar</filename> and
<filename>isorelax.jar</filename>.</para>
<para>To use the <link xlink:href="http://java.net/projects/msv">Multi-Schema Validator</link>,
you must have <filename>msv.jar</filename>,
<filename>isorelax.jar</filename>,
<filename>relaxngDatatype.jar</filename>, and
<filename>xsdlib.jar</filename>.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term><tag>cxu:compare</tag></term>
<listitem>
<para>To use the <link xlink:href="http://xmlunit.sourceforge.net/">&lt;xml-unit/&gt;</link>
XML comparison step, you must have
<filename>junit-4.8.1.jar</filename> and
<filename>xmlunit-1.3.jar</filename>.</para>
</listitem>
</varlistentry>

<varlistentry>
<term><tag>cx:send-mail</tag></term>
<listitem>
<para>The send mail step requires <filename>mail.jar</filename>.</para>
</listitem>
</varlistentry>

<varlistentry>
<term><tag>cx:metadata-extractor</tag></term>
<listitem>
<para>The <link xlink:href="http://drewnoakes.com/code/exif/">Metadata Extractor</link>
requires <filename>metadata-extractor-2.3.1.jar</filename>.</para>
</listitem>
</varlistentry>

<varlistentry>
<term><tag>p:validate-with-xml-schema</tag></term>
<listitem>
<para>Using W3C XML Schema validation requires the Saxon EE product,
<filename>saxon9ee.jar</filename>.</para>
<para>If you don't have Saxon EE, the XML Schema validation step can
fall-back to Xerces validation, but that's not as complete or flexible
at this time.</para>
</listitem>
</varlistentry>

<varlistentry>
<term><tag>ml:adhoc-query</tag>, <tag>ml:insert-document</tag>, and
<tag>ml:invoke-module</tag></term>
<listitem>
<para>The <link xlink:href="http://www.marklogic.com/">MarkLogic</link> steps
require <filename>xcc.jar</filename>.</para>
</listitem>
</varlistentry>

<varlistentry>
<term>Parsing HTML</term>
<listitem>
<para>Parsing HTML into well-formed XML with
<link xlink:href="http://ccil.org/~cowan/XML/tagsoup/">TagSoup</link>
requires <filename>tagsoup-1.2.jar</filename>. Parsing with
the <link xlink:href="http://about.validator.nu/htmlparser/">Validator.nu HTML
Parser</link> requires <filename>htmlparser-1.3.1.jar</filename>.</para>
</listitem>
</varlistentry>

<varlistentry>
<term>Resource management</term>
<listitem>
<para>Resource management features (catalogs, URI caching, etc.) require
<filename>xmlresolver.jar</filename>.
</para>
</listitem>
</varlistentry>
</variablelist>

<para>Assuming you have the appropriate jar files on your classpath, you can run
<citetitle>XML Calabash</citetitle> like this:</para>

<screen>java <replaceable>java-options</replaceable> com.xmlcalabash.drivers.Main <replaceable>xml-calabash-options</replaceable> <replaceable>pipeline.xpl</replaceable></screen>

<para>For example:</para>

<screen><prompt>$</prompt> <userinput>cd calabash-<replaceable>version</replaceable></userinput>
<prompt>$</prompt> <userinput>java com.xmlcalabash.drivers.Main xpl/pipe.xpl</userinput>
<computeroutput>&lt;doc xmlns:p="http://www.w3.org/ns/xproc"&gt;
Congratulations! You've run your first pipeline!
&lt;/doc&gt;</computeroutput></screen>

<para>You can use
<option>-i<replaceable>port</replaceable>=<replaceable>uri</replaceable></option>
to change the inputs and
<option>-o<replaceable>port</replaceable>=<replaceable>file</replaceable></option>
to change the output location.</para>

<para>For example:</para>

<screen><prompt>$</prompt> <userinput>java com.xmlcalabash.drivers.Main -isource=xpl/pipe.xpl -oresult=/tmp/out.xml xpl/pipe.xpl</userinput></screen>

<para>That will run <filename>xpl/pipe.xpl</filename> using <filename>xpl/pipe.xpl</filename>
as the input and writing the result to <filename>/tmp/out.xml</filename>.</para>

<para>If you run java com.xmlcalabash.drivers.Main with no options, it will
print a short usage summary.</para>

<para>Throughout this book, we assume that the command <replaceable>calabash</replaceable>
will run Java with the correct class path and other arguments.</para>
</section>

<section xml:id="cmdline">
<title>The command line</title>

<para>The following synopsis describes the <citetitle>XML Calabash</citetitle> command line:</para>

<cmdsynopsis>
  <command><replaceable>calabash</replaceable></command>
  <arg>--saxon-processor <replaceable>processortype</replaceable></arg>
  <arg>--saxon-configuration <replaceable>filename</replaceable></arg>
  <arg>--schema-aware</arg>
  <arg>--debug</arg>
  <arg>--safe-mode</arg>
  <arg>--config <replaceable>configuri</replaceable></arg>
  <arg>--log-style=
    <group choice="plain">
      <arg choice="plain">off</arg>
      <arg choice="plain">plain</arg>
      <arg choice="plain">wrapped</arg>
      <arg choice="plain">directory</arg>
    </group>
  </arg>
  <sbr/>
  <arg>--entity-resolver=<replaceable>classname</replaceable></arg>
  <arg>--uri-resolver=<replaceable>classname</replaceable></arg>
  <arg rep="repeat">--extension=<replaceable>extname</replaceable></arg>
  <sbr/>
  <arg rep="repeat">--binding <replaceable>prefix</replaceable>=<replaceable>uri</replaceable></arg>
  <arg rep="repeat">--with-param <replaceable>name</replaceable>=<replaceable>value</replaceable></arg>
  <sbr/>
  <arg rep="repeat">--input <replaceable>portname</replaceable>=<replaceable>uri</replaceable></arg>
  <arg rep="repeat">--data-input <replaceable>portname</replaceable>=<replaceable>uri</replaceable></arg>
  <arg rep="repeat">--output <replaceable>portname</replaceable>=<replaceable>uri</replaceable></arg>
  <sbr/>
  <arg>--library=<replaceable>uri</replaceable></arg>
  <group choice="plain">
    <group choice="plain">
      <arg choice="plain" rep="repeat">--step=<replaceable>steptype</replaceable></arg>
    </group>
    <arg choice="plain"><replaceable>pipeline-uri</replaceable></arg>
  </group>
  <sbr/>
  <arg rep="repeat"><replaceable>name</replaceable>=<replaceable>value</replaceable></arg>
</cmdsynopsis>

<para>See <xref linkend="configuration"/> for a description of these arguments and what they
mean.</para>

<para>There are two different ways to select the pipeline to run: you can specify the URI of
the pipeline document or you can specify one or more step types.</para>
</section>

<section xml:id="help">
<title>What do I do if it all goes wrong?</title>

<para>Tell Norm, <link xlink:href="mailto:ndw@nwalsh.com">ndw@nwalsh.com</link>.
There is also an XProc developers mailing list,
<link xlink:href="http://markmail.org/search/?q=list%3Axproc-dev">xproc-dev@lists.w3.org</link>
which may provide useful advice.</para>
</section>

</chapter>
